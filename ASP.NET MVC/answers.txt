1. What are the responsibilities of each layer of the MVC architecture and how are they connected?
Model - represents the data and business logic, interacts with the database
View - responsible for the UI, renders data from the controller to the user
Controller - handles user input, interacts with the model and returns a view

2. What are the naming conventions for models, controllers, controller actions, views folders and views themselves?
Component		Convention
Models			PascalCase, singular (Movie.cs)
Controllers		PascalCase, ends with "Controller" (MoviesController.cs)
Controller actions	PascalCase (Index, Create)
Views folders		Matching controller name (/Views/Movies/)
Views			Matching action name (Index.cshtml, Create.cshtml)

3. How to pass data from controllers to views (2 options)?
a) Pass a model object directly to the view - violates DRY (Don't Repeat Yourself) principle, adds the view data in each and every controller action
b) Add the view data only once within an Application controller - avoids duplicate code when passing data to view master page

4. How to map URLâ€™s to controller actions?
MapControllerRoute is used to create a single route. The single route is named default route. Most apps with controllers and views use a route template similar to the default route.
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
The route template "{controller=Home}/{action=Index}/{id?}" matches a URL path like /Products/Details/5.

5. How to restrict controller actions to be executed only via certain HTTP request types (e.g. only via POST)?
Use HTTP method attributes: [HttpPost], [HttpGet], [HttpPut], [HttpDelete].
Example:
[HttpPost]
public IActionResult Create(Movie movie)

6. How to make sure a controller action can only be called through a form on our website and not through some external request?
To prevent external requests we can use anti-forgery tokens.
In the View - include @Html.AntiForgeryToken() within the form.
In the Controller - decorate the action with [ValidateAntiForgeryToken].

7. Where do you define data validation and how do you ensure it in views and controllers?
Validation is implemented using data annotations in the model. 
Example:
[RegularExpression(@"^[A-Z]+[a-zA-Z\s]*$")]
    [Required]
    [StringLength(30)]
    public string? Genre { get; set; }
The controller checks ModelState.IsValid before processing, and the view displays validation messages accordingly.
